package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Rectangle2D;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

import model.Board;
import model.MovableTetrisPiece;
import model.Point;
import model.TetrisPiece;

public class GamePanel extends JPanel implements Observer {
    private JFrame myFrame;
    private Board myBoard;
    private JPanel myPanel;
    private Rectangle2D myRectangle;
    private TetrisPiece myTetris;
    private MovableTetrisPiece myPiece;
    private Timer myTimer;
    private char [] myBlocks = {'I','J','L', 'O', 'S', 'T','Z'};
    private int myXCount = 0;
    private int myYCount = 0;

    public GamePanel(){
        myFrame = new JFrame("Tetris");
        myPanel = new JPanel();
        myPanel.setSize(200,100);
        myPanel.setBackground(Color.WHITE);
        myBoard = new Board();
        myTimer = new Timer(1000, new TimerListener());
        myRectangle = new Rectangle2D.Double(0, 0, 50, 50);
        myTetris = myTetris.S;
       // myPiece = new TetrisPiece();
       // myBoard.down();
        myPiece = new MovableTetrisPiece(myTetris.S, new Point(0,0));
        //myPiece.getBlock().toString();
       // myBoard.drop();
        //System.out.println(myPiece.getBlock().toString());
        myBoard.newGame();
        myFrame.setFocusable(true);
        myFrame.addKeyListener(new DirectionListener());
        
    }
    
 
    
   
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2 = (Graphics2D) theGraphics;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
        String line = myBoard.toString();
        System.out.println("I'm being called");
        
        for(int i = 0; i < line.length(); i++){
            
            myXCount  ++;
            if(line.charAt(i) == '\n') {
                myYCount++;
                myXCount = 0;
            }
            if(line.charAt(i) == 'O') {
                g2.drawRect(myXCount, myYCount, 20, 20);
                System.out.println("I am being called");
                
            }
        }
        

        //g2.draw(myRectangle);
        //System.out.println("I'm being called");
        //myRectangle.setFrame(myPiece.getBlock();)
        
    }
    
    public void setUp() {
        myTimer.start();
        myFrame.setSize(400,600);
        myFrame.setLocationRelativeTo(null);
       // myFrame.add(myPiece);
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        GamePanel game = new GamePanel();
        //game.setSize(200,100);
        game.setBackground(Color.WHITE);
       myFrame.add(game, BorderLayout.CENTER);
        myFrame.setVisible(true);
    }
    @Override
    public void update(Observable o, Object arg) {
      // myBoard.down();
       // System.out.println(arg);
        
        System.out.println(myBoard.toString());
        //repaint();
       
            
        
        //System.out.println("I'm here");
        //isValid();
        //System.out.println(myPiece.toString());
       // System.out.println(arg.toString());
      
        
        
    }
    private class DirectionListener implements KeyListener{

        @Override
        public void keyTyped(KeyEvent e) {
            if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
                myBoard.right();
            }
            System.out.println("Typed");
            
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
                myBoard.right();
                //System.out.println("right");
            }
            if(e.getKeyCode() == KeyEvent.VK_LEFT) {
                myBoard.left();
                //System.out.println("left");
            }
            if(e.getKeyCode() == KeyEvent.VK_DOWN) {
                myBoard.down();
                //System.out.println("down");
            }
            if(e.getKeyCode() == KeyEvent.VK_D) {
                myBoard.drop();
                //System.out.println("drop");
            }
            if(e.getKeyCode() == KeyEvent.VK_R) {
                myBoard.rotate();
                //System.out.println("rotate");
            }
            
            // TODO Auto-generated method stub
          // System.out.println("Pressed");
        }

        @Override
        public void keyReleased(KeyEvent e) {
            // TODO Auto-generated method stub
           // System.out.println("Released");
            
        }
        
    }
    
    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            
           myBoard.down();
           //repaint();
           System.out.println("Timer called");
           
           
            //myBoard.rotate();
           update(myBoard, myBoard.toString());
            
            
            
        }
        
        
    }
    
    

}
