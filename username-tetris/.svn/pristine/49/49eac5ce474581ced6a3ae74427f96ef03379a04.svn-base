/*
 * TCSS 305 - Autumn 2016 Assignment 6a - Tetris
 */
package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.RenderingHints;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import java.util.Observable;
import java.util.Observer;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import javax.swing.Timer;

import model.Board;
import model.MovableTetrisPiece;

/**
 * The Tetris Game Panel for this program.
 * 
 * @author Mahad Fahiye
 * @version 12.3.2016.1
 */
public class GamePanel extends JPanel implements Observer {
    /**
     * Serial number for this class. 
     */
    private static final long serialVersionUID = -1172487208830731928L;

    /** The red component of the "UW purple" Color. */
    private static final int UW_RED = 75;

    /** The green component of the "UW purple" Color. */
    private static final int UW_GREEN = 46;

    /** The blue component of the "UW purple" Color. */
    private static final int UW_BLUE = 131;

    /** The red component of the "UW Gold" Color. */
    private static final int UWG_RED = 183;

    /** The green component of the "UW Gold" Color. */
    private static final int UWG_GREEN = 165;

    /** The blue component of the "UW Gold" Color. */
    private static final int UWG_BLUE = 122;

    /**
     * The timer delay.
     */
    private static final int DELAY = 1000;

    /**
     * The height of the game panel.
     */
    private static final int HEIGHT = 100;

    /**
     * The width of the game panel.
     */
    private static final int WIDTH = 200;

    /**
     * The width of the frame.
     */
    private static final int FRAME_WIDTH = 400;

    /**
     * The height of the frame.
     */
    private static final int FRAME_HEIGHT = 222;

    /**
     * The size of each Tetris block.
     */
    private static final int BLOCK_SIZE = 10;
    /**
     * The Frame that will hold all the components.
     */
    private JFrame myFrame;
    /**
     * The Board Object that I will be using to in this class.
     */
    private Board myBoard;

    /**
     * The color of the Tetris shapes.
     */
    private Color myColor;

    /**
     * The timer that I will use to make the Tetris pieces drop.
     */
    private Timer myTimer;
    /**
     * The x counter to keep track of the x coordinate of the Tetris piece.
     */
    private int myXCount;

    /**
     * The y counter to keep track of the y coordinate of the Tetris piece.
     */
    private int myYCount;

    /**
     * The Next piece panel object that will be used for reference.
     */
    private NextPiece myNextPiecePanel;

    /**
     * UW GOLD color that will be used for the background color of the panel.
     */
    private Color myGoldColor;

    /**
     * Boolean for storing whether the game is over or not.
     */
    private boolean myGameOver;

    /**
     * The constructor for the Game panel.
     */
    public GamePanel() {
        myFrame = new JFrame("Tetris");
        myBoard = new Board();
        myTimer = new Timer(DELAY, new TimerListener());
        myBoard.newGame();
        myColor = new Color(UW_RED, UW_GREEN, UW_BLUE);
        myGoldColor = new Color(UWG_RED, UWG_GREEN, UWG_BLUE);

        setPreferredSize(new Dimension(HEIGHT, WIDTH));
        setBackground(myGoldColor);
        setVisible(true);

    }

    /**
     * Sets up the game panel.
     */
    public void setUp() {
        myFrame.setFocusable(true);
        myFrame.addKeyListener(new DirectionListener());
        myTimer.start();
        myBoard.addObserver(this);

        myFrame.setBackground(Color.BLACK);
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        final JPanel eastPanel = new JPanel();
        myNextPiecePanel = new NextPiece();
        final JPanel nextPieceWindow = new JPanel();
        final InstructionsPanel instructions = new InstructionsPanel();
        nextPieceWindow.setLayout(new BorderLayout());
        nextPieceWindow.add(myNextPiecePanel, BorderLayout.EAST);
        nextPieceWindow.setBackground(Color.GRAY);
        final JLabel nextPieceLabel = new JLabel();
        nextPieceLabel.setText("Next Piece ");
        final int fontsize = 30;
        nextPieceLabel.setFont(new Font("Marker Felt", Font.BOLD, fontsize));
        nextPieceLabel.setForeground(myColor);
        nextPieceWindow.add(nextPieceLabel);
        eastPanel.setBackground(Color.RED);
        eastPanel.setLayout(new GridLayout(2, 1));
        eastPanel.add(nextPieceWindow);
        eastPanel.add(instructions);
        eastPanel.setPreferredSize(new Dimension(WIDTH, HEIGHT));
        myFrame.add(eastPanel, BorderLayout.CENTER);
        myFrame.add(this, BorderLayout.WEST);
        myFrame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
        myFrame.setLocationRelativeTo(null);
        myFrame.setVisible(true);
        myFrame.setResizable(false);

    }

    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2 = (Graphics2D) theGraphics;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
        final String line = myBoard.toString();
        // the 4 lines before a piece enters the game board.
        final int ignoredCharecters = 65;
        myXCount = 0;
        myYCount = 0;
        for (int i = ignoredCharecters; i < line.length() - 1; i++) {
            if (line.charAt(i) == '\n') {
                myYCount++;
                myXCount = 0;

            }

            if (line.charAt(i) == ' ') {
                myXCount++;
            } else if (Character.isAlphabetic(line.charAt(i))) {
                g2.setPaint(myColor);
                g2.fillRect(myXCount * (HEIGHT / BLOCK_SIZE),
                            (myYCount * (WIDTH / BLOCK_SIZE)) / 2,
                            BLOCK_SIZE, BLOCK_SIZE);
                g2.setPaint(Color.BLACK);
                g2.drawRect(myXCount * (HEIGHT / BLOCK_SIZE),
                            (myYCount * (WIDTH / BLOCK_SIZE)) / 2,
                            BLOCK_SIZE, BLOCK_SIZE);

                myXCount++;

            }
        }
        if (myGameOver) {
            myGameOver = false;
            myFrame.setTitle("Game Over");

        }

    }

    @Override
    public void update(final Observable theO, final Object theArg) {
        if (theArg instanceof MovableTetrisPiece) {
            myNextPiecePanel.setNextPiece(theArg);

        } else if (theArg.equals(true)) {
            myGameOver = true;

        }

        repaint();
    }
    /**
     * The Keyboard Listener for this program.
     * 
     * @author Mahad Fahiye
     * @version 12.3.2016.1
     */
    private class DirectionListener implements KeyListener {

        @Override
        public void keyTyped(final KeyEvent theE) {
            if (theE.getKeyCode() == KeyEvent.VK_RIGHT) {
                myBoard.right();
            }

        }

        @Override
        public void keyPressed(final KeyEvent theE) {
            if (theE.getKeyCode() == KeyEvent.VK_RIGHT) {
                myBoard.right();
            }
            if (theE.getKeyCode() == KeyEvent.VK_LEFT) {
                myBoard.left();
            }
            if (theE.getKeyCode() == KeyEvent.VK_DOWN) {
                myBoard.down();
            }
            if (theE.getKeyCode() == KeyEvent.VK_SPACE) {
                myBoard.drop();
            }
            if (theE.getKeyCode() == KeyEvent.VK_UP) {
                myBoard.rotate();
            }

        }

        @Override
        public void keyReleased(final KeyEvent theE) {
            // TODO Auto-generated method stub
            
        }

    }
    /**
     * The Timer Action Listener for this program.
     * @author Mahad Fahiye
     * @version 12.3.2016.1
     */
    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(final ActionEvent theE) {

            myBoard.down();

          

        }

    }

}
