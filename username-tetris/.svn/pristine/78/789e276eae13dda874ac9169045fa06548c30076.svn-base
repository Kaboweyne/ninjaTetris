package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Rectangle2D;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;

import model.Board;
import model.MovableTetrisPiece;
import model.Point;
import model.TetrisPiece;

public class GamePanel extends JPanel implements Observer {
    private JFrame myFrame;
    private Shape myShape;
    private Board myBoard;
    
    private Rectangle2D myRectangle;
    private TetrisPiece myTetris;
    private MovableTetrisPiece myPiece;
    private Timer myTimer;
    private char [] myBlocks = {'I','J','L', 'O', 'S', 'T','Z'};
    private int myXCount = 0;
    private int myYCount = 0;
    private NextPiece myNextPiecePanel;
    private static final int BLOCK_SIZE = 10;

    public GamePanel(){
        myFrame = new JFrame("Tetris");
       
//        this.setSize(100, 200);
        
        //setMinimumSize(new Dimension(100, 200));
        this.setPreferredSize(new Dimension(100, 0));
        setBackground(Color.WHITE);
        setVisible(true);
        myBoard = new Board();
        myTimer = new Timer(1000, new TimerListener());
        myRectangle = new Rectangle2D.Double();
//        myTetris = myTetris.S;
        myBoard.newGame();
       // myPiece = new TetrisPiece();
       // myBoard.down();
        myPiece = new MovableTetrisPiece(myTetris.S, new Point(0,0));
        //myPiece.getBlock().toString();
       // myBoard.drop();
        //System.out.println(myPiece.getBlock().toString());
        
        
    }
    public void setUp() {
        myFrame.setFocusable(true);
        myFrame.addKeyListener(new DirectionListener());
        myTimer.start();
        myBoard.addObserver(this);
        
        myFrame.setBackground(Color.BLACK);
        
       // myFrame.add(myPiece);
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JPanel eastPanel = new JPanel();
        myNextPiecePanel = new NextPiece();
        JPanel nextPieceWindow = new JPanel();
        InstructionsPanel instructions = new InstructionsPanel();
        //eastPanel.setLayout(new BorderLayout());
        nextPieceWindow.setLayout(new BorderLayout());
        nextPieceWindow.add(myNextPiecePanel, BorderLayout.EAST);
        nextPieceWindow.setBackground(Color.GRAY);
        JLabel nextPieceLabel = new JLabel();
        nextPieceLabel.setText("Next Piece");
        nextPieceLabel.setFont(new Font("Marker Felt", Font.BOLD, 30));
        nextPieceLabel.setForeground(Color.RED);
        nextPieceWindow.add(nextPieceLabel);
        //nextPieceWindow.setPreferredSize(new Dimension(50,50));
        eastPanel.setBackground(Color.RED);
        eastPanel.setLayout(new GridLayout(2,1));
        eastPanel.add(nextPieceWindow);
        eastPanel.add(instructions);
        eastPanel.setPreferredSize(new Dimension(200,100));
        myFrame.add(eastPanel, BorderLayout.CENTER);
        myFrame.add(this, BorderLayout.WEST);
        myFrame.setSize(222,222);
        myFrame.setLocationRelativeTo(null);
        myFrame.setVisible(true);
       // myFrame.setResizable(false);
        //myFrame.pack();
    }
 
    
   
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2 = (Graphics2D) theGraphics;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
       // System.out.println("Repaint is being called");
        String line = myBoard.toString();
       // System.out.println(line.length());
//        System.out.println(getHeight());
//        System.out.println(getWidth());
//        g2.drawRect(0, 0, BLOCK_SIZE, BLOCK_SIZE);
        myXCount = 0;
        myYCount = 0;
        
        for(int i = 65; i < line.length() - 1; i++) {
            //System.out.println("Hello World");
             if(line.charAt(i) == '\n') {
//                 System.out.println("Hello World");
                //System.out.println("---------");
                 myYCount++;
                 myXCount = 0;
                
//                myXCount = 0;
            }
             
            if (line.charAt(i) == ' ') {
                myXCount++;
//                System.out.println(myXCount);
            } else if (Character.isAlphabetic(line.charAt(i))) {
                g2.setPaint(Color.BLUE);
               g2.fillRect(myXCount * (100 / BLOCK_SIZE), 
                           (myYCount * (200 / BLOCK_SIZE))/2, BLOCK_SIZE, BLOCK_SIZE);
                g2.setPaint(Color.BLACK);
                g2.drawRect(myXCount * (100 / BLOCK_SIZE), 
                            (myYCount * (200 / BLOCK_SIZE))/2, BLOCK_SIZE, BLOCK_SIZE);
                
                
                myXCount++;
//                System.out.println(myXCount);
                
            }
//            if(line.charAt(i) == 'I') {
//                System.out.println(line.charAt(i));
////                System.out.println("X= " + myXCount);
////                System.out.println("Y= " +myYCount);
////                
////                myShape = drawTetrisShape(myXCount,myYCount);
////                System.out.println(myShape);
//                g2.drawRect(myXCount * (getWidth() / BLOCK_SIZE), myYCount * (getHeight() / BLOCK_SIZE), BLOCK_SIZE, BLOCK_SIZE); 
////                System.out.println(myXCount);
//                myXCount++;
////
////                //System.out.println("I am being called");
////                 
////                
//            }
//            if(line.charAt(i) == 'J') {
//                g2.drawRect(myXCount * (getWidth() / BLOCK_SIZE), myYCount * (getHeight() / BLOCK_SIZE), BLOCK_SIZE, BLOCK_SIZE);               // System.out.println("X= " + myXCount);
//                
//                myXCount++;
//               
//               // System.out.println(myShape);
//
//                // System.out.println(" J is being called");
//                 
//
//                
//            }
//            if(line.charAt(i) == 'L') {
//            //    System.out.println("X= " + myXCount);
//            //    System.out.println("Y= " +myYCount);
//                myXCount++;
//                g2.drawRect(myXCount * (getWidth() / BLOCK_SIZE), myYCount * (getHeight() / BLOCK_SIZE), BLOCK_SIZE, BLOCK_SIZE);            //    System.out.println(myShape);
//
//                //System.out.println("L is being called");
//                 
//
//            }
//            if(line.charAt(i) == 'O') {
//              //  System.out.println("X= " + myXCount);
//               // System.out.println("Y= " +myYCount);
//                g2.drawRect(myXCount * (getWidth() / BLOCK_SIZE), myYCount * (getHeight() / BLOCK_SIZE), BLOCK_SIZE, BLOCK_SIZE);                myXCount++;
//                //System.out.println(myShape);
//
//                //System.out.println("O am being called");
//                 
//
//            }
//            if(line.charAt(i) == 'S') {
//                //System.out.println("X= " + myXCount);
//              //  System.out.println("Y= " +myYCount);
//                g2.drawRect(myXCount * (getWidth() / BLOCK_SIZE), myYCount * (getHeight() / BLOCK_SIZE), BLOCK_SIZE, BLOCK_SIZE);                myXCount++;
//              //  System.out.println(myShape);
//
//                
//                //System.out.println("S am being called");
//                
//                
//                 
//
//            }
//            if(line.charAt(i) == 'T') {
//               // System.out.println("X= " + myXCount);
//               // System.out.println("Y= " +myYCount);
//                g2.drawRect(myXCount * (getWidth() / BLOCK_SIZE), myYCount * (getHeight() / BLOCK_SIZE), BLOCK_SIZE, BLOCK_SIZE);                myXCount++;
//                //System.out.println(myShape);
//
//                
//                //System.out.println("T am being called");
//                 
//
//            }
//            if(line.charAt(i) == 'Z') {
//                
//                //System.out.println("X= " + myXCount);
//                //System.out.println("Y= " +myYCount);
//                g2.drawRect(myXCount * (getWidth() / BLOCK_SIZE), myYCount * (getHeight() / BLOCK_SIZE), BLOCK_SIZE, BLOCK_SIZE);
//                myXCount++;
//                //System.out.println(myShape);
//
//                
//                //System.out.println("T am being called");
//                 
//
//            }
//            
        }
        
       // System.out.println(myShape);
        //System.out.println(myShape);
        if(myShape != null){
            System.out.println(myShape);
            g2.draw(myShape);

        //g2.draw(myRectangle); 
        }
        
        
        
        
        

        //g2.draw(myRectangle);
        //System.out.println("I'm being called");
        //myRectangle.setFrame(myPiece.getBlock();)
        
    }
    
    
    @Override
    public void update(Observable o, Object arg) {
        if (arg instanceof MovableTetrisPiece) {
            myNextPiecePanel.setNextPiece(arg);
            //System.out.println(arg);
            
        }
        repaint();
        // 
       
            
        
        //System.out.println("I'm here");
        //isValid();
        //System.out.println(myPiece.toString());
       // System.out.println(arg.toString());
      
        
        
    }
    
    public Shape drawTetrisShape(int theX, int theY) {
        myRectangle.add(theX, theY);
        return myRectangle;
        
    }
    private class DirectionListener implements KeyListener{

        @Override
        public void keyTyped(KeyEvent e) {
            if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
                myBoard.right();
            }
           // System.out.println("Typed");
            
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
                myBoard.right();
                //System.out.println("right");
            }
            if(e.getKeyCode() == KeyEvent.VK_LEFT) {
                myBoard.left();
                //System.out.println("left");
            }
            if(e.getKeyCode() == KeyEvent.VK_DOWN) {
                myBoard.down();
                //System.out.println("down");
            }
            if(e.getKeyCode() == KeyEvent.VK_D) {
                myBoard.drop();
                //System.out.println("drop");
            }
            if(e.getKeyCode() == KeyEvent.VK_R) {
                myBoard.rotate();
                //System.out.println("rotate");
            }
            
            //   
          // System.out.println("Pressed");
        }

        @Override
        public void keyReleased(KeyEvent e) {
            // TODO Auto-generated method stub
           // System.out.println("Released");
            
        }
        
    }
    
    
    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            
            
           myBoard.down();
           
           //repaint();
            
          // System.out.println(myBoard.toString());
           
           
            //myBoard.rotate();
          
            
            
            
        }
        
        
    }
    
    

}
