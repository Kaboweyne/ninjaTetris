package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import javax.swing.JPanel;

import model.MovableTetrisPiece;

public class NextPiece extends JPanel {
    
   private MovableTetrisPiece myPiece;
private static final int BLOCK_SIZE = 20;
private int myXCount;
private int myYCount;
   
   public NextPiece() {
       setPreferredSize(new Dimension(100,100));
       setBackground(Color.GREEN);
       
   }
   
    public Graphics2D drawOPiece(Graphics2D theGraphics) {
        theGraphics.setPaint(Color.BLUE);
        theGraphics.fillRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 + BLOCK_SIZE, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 +BLOCK_SIZE, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.setColor(Color.BLACK);
        theGraphics.drawRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 + BLOCK_SIZE, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 +BLOCK_SIZE, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);

       
    return theGraphics;
       
   }
    public Graphics2D drawSPiece(Graphics2D theGraphics) {
        theGraphics.setPaint(Color.BLUE);
        theGraphics.fillRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 + BLOCK_SIZE, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 -BLOCK_SIZE, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.setColor(Color.BLACK);
        theGraphics.drawRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 + BLOCK_SIZE, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20, 20 +BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 - BLOCK_SIZE, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);

       
    return theGraphics;
    }
    public Graphics2D drawZPiece(Graphics2D theGraphics) {
        theGraphics.setPaint(Color.BLUE);
        theGraphics.fillRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 + BLOCK_SIZE, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 +BLOCK_SIZE, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 +BLOCK_SIZE *2, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.setColor(Color.BLACK);
        theGraphics.drawRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 + BLOCK_SIZE, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 +BLOCK_SIZE, 20 +BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 +BLOCK_SIZE *2 , 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);

       
    return theGraphics;
       
   }
    
    public Graphics2D drawIPiece(Graphics2D theGraphics) {
        theGraphics.setPaint(Color.BLUE);
        theGraphics.fillRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 + BLOCK_SIZE, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 +BLOCK_SIZE *2, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 +BLOCK_SIZE *3, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.setColor(Color.BLACK);
        theGraphics.drawRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 + BLOCK_SIZE, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 +BLOCK_SIZE *2, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 +BLOCK_SIZE *3 , 20, BLOCK_SIZE, BLOCK_SIZE);

       
    return theGraphics;
       
   }
    public Graphics2D drawJPiece(Graphics2D theGraphics) {
        theGraphics.setPaint(Color.BLUE);
        theGraphics.fillRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 + BLOCK_SIZE , 20 +BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 +BLOCK_SIZE *2, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.setColor(Color.BLACK);
        theGraphics.drawRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 + BLOCK_SIZE , 20 +BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 +BLOCK_SIZE *2, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);

       
    return theGraphics;
       
   }
    public Graphics2D drawLPiece(Graphics2D theGraphics) {
        theGraphics.setPaint(Color.BLUE);
        theGraphics.fillRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 - BLOCK_SIZE , 20 +BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 - BLOCK_SIZE *2, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.setColor(Color.BLACK);
        theGraphics.drawRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 - BLOCK_SIZE , 20 +BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 - BLOCK_SIZE *2, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);

       
    return theGraphics;
       
   }
    public Graphics2D drawTPiece(Graphics2D theGraphics) {
        theGraphics.setPaint(Color.BLUE);
        theGraphics.fillRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 - BLOCK_SIZE , 20 +BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.fillRect(20 +BLOCK_SIZE, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.setColor(Color.BLACK);
        theGraphics.drawRect(20, 20, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20, 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 - BLOCK_SIZE , 20 +BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        theGraphics.drawRect(20 + BLOCK_SIZE , 20 + BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);

       
    return theGraphics;
       
   }
    
    
   
    
    
    
    
    
    
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2 = (Graphics2D) theGraphics;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        if(myPiece != null) {
            
            if(myPiece.getBlock().name() == "O") {
                drawOPiece(g2);
            } else if(myPiece.getBlock().name() == "S") {
                drawSPiece(g2);
            } else if(myPiece.getBlock().name() == "Z") {
                drawZPiece(g2);
            }  else if(myPiece.getBlock().name() == "J") {
                drawJPiece(g2);
            } else if(myPiece.getBlock().name() == "L") {
                drawLPiece(g2);
            }  else if(myPiece.getBlock().name() == "I") {
                drawIPiece(g2);
            } else if(myPiece.getBlock().name() == "T") {
                drawTPiece(g2);
            }
            
        
        }
    }








    public void setNextPiece(Object thePiece) {
        
        myPiece = (MovableTetrisPiece) thePiece;
        System.out.println(myPiece.getBlock().toString());
        repaint();
        
    }
    

}
